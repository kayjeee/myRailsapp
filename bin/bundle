#!/usr/bin/env ruby
# frozen_string_literal: true

#
# This file was generated by Bundler.
#
# The application 'bundle' is installed as part of a gem, and
# this file is here to facilitate running it.
#

require 'rubygems'

# Module for handling Bundler activation and version management
module BundlerWrapper
  module_function

  # Returns true if the script is invoked directly, false otherwise.
  def invoked_as_script?
    File.expand_path($PROGRAM_NAME) == File.expand_path(__FILE__)
  end

  # Returns the bundler version extracted from CLI arguments if present.
  def cli_arg_version
    return unless invoked_as_script? # Don't want to hijack other binstubs
    return unless ARGV.first.to_s.start_with?('update') # Must be running `bundle update`

    extract_bundler_version_from_cli_arguments
  end

  # ... (rest of the code remains the same)

  # Activates the Bundler gem with the specified version or displays an error message.
  def activate_bundler
    gem_error = activation_error_handling { gem 'bundler', bundler_requirement }
    return if gem_error.nil?

    require_error = activation_error_handling { require 'bundler/version' }

    if require_error.nil? && Gem::Requirement.new(bundler_requirement).satisfied_by?(Gem::Version.new(Bundler::VERSION))
      return
    end

    print_activation_failure(gem_error)
  end

  # Handles errors during gem activation.
  def activation_error_handling
    yield
  rescue StandardError, LoadError => e
    e
  end

  # Prints activation failure message.
  def print_activation_failure(gem_error)
    warn "Activating bundler (#{bundler_requirement}) failed:"
    warn "#{gem_error.message}\n\nTo install the version of bundler this project requires,"
    warn "run `gem install bundler -v '#{bundler_requirement}'`"
    exit 42
  end
end

BundlerWrapper.load_bundler!
load Gem.bin_path('bundler', 'bundle') if BundlerWrapper.invoked_as_script?
